# @file comm_monitor.py
#
# Copyright (C) Metaswitch Networks 2016
# If license terms are provided to you in a COPYING file in the root directory
# of the source code repository by which you are accessing this code, then
# the license outlined in that COPYING file applies to your use.
# Otherwise no rights are granted except for those provided to you by
# Metaswitch Networks in a separate written agreement.


import unittest
import mock

from metaswitch.common.comm_monitor import CommunicationMonitor
from metaswitch.common.pdlogs import CASSANDRA_CONNECTION_LOST, CASSANDRA_CONNECTION_RECOVERED

class CMTestCase(unittest.TestCase):
    @mock.patch("metaswitch.common.comm_monitor.alarm_manager")
    @mock.patch("metaswitch.common.comm_monitor.monotonic")
    def test_simple(self, mock_time, mock_alarm_manager):
        """Simple test of basic behaviour."""

        mock_alarm = mock_alarm_manager.get_alarm.return_value

        # Use a fake alarm value so that we don't have to rely on
        # autogenerated alarm files.
        cm = CommunicationMonitor("ut", (1000, 1, 3), CASSANDRA_CONNECTION_LOST, CASSANDRA_CONNECTION_RECOVERED)
        mock_alarm_manager.get_alarm.assert_called_with("ut", (1000, 1, 3))

        # Move time forwards and report a failure. We should raise an alarm.
        mock_time.return_value = 1000
        cm.inform_failure()
        mock_alarm.set.assert_called_once_with()

        # Move time forwards and report a success. We should clear that alarm.
        mock_time.return_value = 3000
        cm.inform_success()
        mock_alarm.clear.assert_called_once_with()

if __name__ == "__main__":
    unittest.main()
